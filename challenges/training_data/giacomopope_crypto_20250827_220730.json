{
  "source": "GiacomoPope GitHub Repository",
  "repository": "GiacomoPope/giacomopope.github.io",
  "url": "https://github.com/GiacomoPope/giacomopope.github.io",
  "download_date": "2025-08-27T22:07:24.681850",
  "total_files": 21,
  "files_processed": 21,
  "content_types": {
    "ctf_writeup": 19,
    "blog_post": 2
  },
  "knowledge_extracted": {
    "techniques": [
      "diffie-hellman",
      "sidh",
      "festa",
      "isogeny",
      "aes",
      "elliptic curve",
      "sike",
      "python",
      "lattice",
      "rsa",
      "magma",
      "discrete log",
      "castryck-decru",
      "des",
      "pohlig-hellman",
      "gap",
      "pollard",
      "sagemath",
      "sqisign",
      "coppersmith",
      "sage"
    ],
    "algorithms": [],
    "tools": [
      "gap",
      "sage",
      "magma",
      "pari",
      "mathematica",
      "python"
    ],
    "attacks": [
      "key recovery",
      "collision",
      "chosen plaintext"
    ],
    "flags": [
      "flag{TTAUUTCAGUGUGGTTGAAUAUAT}",
      "flag{' and flag[-1:] == b'}",
      "flag{'+flag+'}",
      "flag{1nTere5tinG_Hyp3re11iPtic_curv3}",
      "flag{1nTere5tinG_Hyp3re11iPtic_curv3}",
      "text{show_me_flag}",
      "frac{s - s^\\prime}",
      "flag{TTAUUTCAGUGUGGTTGAAUAUAT}",
      "flag{' and flag[-1:] == b'}",
      "mathbb{Z}",
      "flag{'+flag+'}",
      "flag{1nTere5tinG_Hyp3re11iPtic_curv3}",
      "flag{1nTere5tinG_Hyp3re11iPtic_curv3}",
      "mathbf{Z}",
      "frac{d-1}",
      "begin{align}",
      "frac{ed-e}",
      "frac{k\\phi(n) + 1 -e}",
      "frac{k\\phi(n)}",
      "frac{1-e}",
      "end{align}",
      "frac{k\\phi(n)}",
      "frac{k}",
      "frac{1-e}",
      "begin{align}",
      "end{align}",
      "ASIS{baby___RSA___f0r_W4rM_uP}",
      "ASIS{baby___RSA___f0r_W4rM_uP}",
      "ASIS{4n_Ellip71c_curve_iZ_A_pl4Ne_al9ebr4iC_cUrv3}",
      "s_{t+1}",
      "vec{c}",
      "vec{a}",
      "vec{a}",
      "vec{c}",
      "s_{i+1}",
      "ASIS{BlUM_G0ldwaS53R_cryptOsySt3M_Iz_HI9hlY_vUlNEr4bl3_70_CCA!?}",
      "ASIS{BlUM_G0ldwaS53R_cryptOsySt3M_Iz_HI9hlY_vUlNEr4bl3_70_CCA!?}",
      "ASIS{`. The script takes seconds and finds the flag.\n\n\n\n### Implementation\n\n```python\nfrom Crypto.Util.number import *\nimport math\n\ndef find_factors(data):\n\tdata_length = len(data)\n\tfor i in range(data_length):\n\t\tp = data[i][0]\n\t\tfor j in range(i+1,data_length):\n\t\t\tx = data[j][0]\n\t\t\tif math.gcd(p,x) != 1:\n\t\t\t\treturn i, math.gcd(p,x)\n\t\t\t\n\ndef encrypt(msg, pubkey, xorkey):\n\th = len(bin(len(bin(pubkey)[2:]))[2:]) - 1\t# dirty log :/\n\tm = bytes_to_long(msg)\n\tif len(bin(m)[2:]) % h != 0:\n\t\tm = '0' * (h - len(bin(m)[2:]) % h) + bin(m)[2:]\n\telse:\n\t\tm = bin(m)[2:]\n\tt = len(m) // h\n\tM = [m[h*i:h*i+h] for i in range(t)]\n\tr = random.randint(1, pubkey)\n\ts_0 = pow(r, 2, pubkey)\n\tC = []\n\tfor i in range(t):\n\t\ts_i = pow(s_0, 2, pubkey)\n\t\tk = bin(s_i)[2:][-h:]\n\t\tc = bin(int(M[i], 2) ^ int(k, 2) & xorkey)[2:].zfill(h)\n\t\tC.append(c)\n\t\ts_0 = s_i\n\tenc = int(''.join(C), 2)\n\treturn (enc, pow(s_i, 2, pubkey))\n\n\ndef xgcd(a, b):\n    \"\"\"return (g, x, y) such that a*x + b*y = g = gcd(a, b)\"\"\"\n    x0, x1, y0, y1 = 0, 1, 1, 0\n    while a != 0:\n        (q, a), b = divmod(b, a), a\n        y0, y1 = y1, y0 - q * y1\n        x0, x1 = x1, x0 - q * x1\n    return b, x0, y0\n\n\ndef decrypt(c, pubkey, p, q, s):\n\t# Idiot checks\n\tassert p*q == pubkey\n\tassert isPrime(p) and isPrime(q)\n\n\th = len(bin(len(bin(pubkey)[2:]))[2:]) - 1\t# dirty log :/\n\tif len(bin(c)[2:]) % h != 0:\n\t\tc = '0' * (h - len(bin(c)[2:]) % h) + bin(c)[2:]\n\telse:\n\t\tc = bin(c)[2:]\n\tt = len(c) // h\n\n\t# Recover s0\n\tdp = (((p + 1) // 4)**(t + 1)) % (p - 1)\n\tdq = (((q + 1) // 4)**(t + 1)) % (q - 1)\n\tup = pow(s, dp, p)\n\tuq = pow(s, dq, q)\n\t_, rp, rq = xgcd(p,q)\n\ts0 = (uq * rp * p + up * rq * q ) % pubkey\n\n\n\tC = [c[h*i:h*i+h] for i in range(t)]\n\n\t# Brute xorkey (max size: 2**10 - 1)\n\tflags = []\n\tfor X in range(1024):\n\t\t# Restore value for brute, and empty M\n\t\ts_0 = s0\n\t\tM = []\n\n\t\tfor i in range(t):\n\t\t\ts_i = pow(s_0, 2, pubkey)\n\t\t\tk = bin(s_i)[2:][-h:]\n\t\t\tm = bin(int(C[i], 2) ^ int(k, 2) & X)[2:].zfill(h)\n\t\t\tM.append(m)\n\t\t\ts_0 = s_i\n\t\t\t\n\t\tfl = long_to_bytes(int(''.join(M),2))\n\t\ttry:\n\t\t\tflag = fl.decode()\n\t\t\tif \"ASIS{\" in flag:\n\t\t\t\tflags.append(flag)\n\t\texcept:\n\t\t\tpass\n\treturn flags\n\n# data from challenge.txt, truncated to only two values save space\ndata = [[12097881278174698631026228331130314850080947749821686944446636213641310652138488716240453597129801720504043924252478136044035819232933933717808745477909546176235871786148513645805314150829468800301698799525780070273753857243854268554322340900904051857831398492096742127894417784386491191471947863787022245824307084379225579368393254254088207494229400873467930160606087032014972366802086915193167585867760542665623158008113534159892785943512727008525032377162641992852773743617023163398493300810949683112862817889094615912113456275357250831609021007534115476194023075806921879501827098755262073621876526524581992383113, (238917053353586684315740899995117428310480789049456179039998548040503724437945996038505262855730406127564439624355248861040378761737917431951065125651177801663731449217955736133484999926924447066163260418501214626962823479203542542670429310307929651996028669399692119495087327652345, 2361624084930103837444679853087134813420441002241341446622609644025375866099233019653831282014136118204068405467230446591931324445417288447017795525046075282581037551835081365996994851977871855718435321568545719382569106432442084085157579504951352401314610314893848177952589894962335072249886688614676995039846245628481594015356555808852415257590789843672862086889766599032421071154614466932749223855909572291554620301269793104658552481172052104139007105875898227773975867750358642521359331140861015951930087364330158718293540721277710068251667789725792771210694545702423605041261814818477350926741922865054617709373)],[11618071445988286159614546200227554667389205281749443004629117264129957740203770615641847148204810865669191685874152730267573467338950993270113782537765608776375192263405546036787453939829561684834308717115775768421300006618296897365279937358126799904528083922552306565620644818855350306352024366076974759484150214528610355358152789696678410732699598714566977211903625075198935310947340456263339204820065134900427056843183640181066232714511087292771420839344635982165997540089604798288048766074061479118366637656581936395586923631199316711697776366024769039316868119838263452674798226118946060593631451490164411150841, (108436642448932709219121968294434475477600203743366957190466733100162456074942118592019300422638950272524217814290069806411298263273760197756252555274382639125596214182186934977255300451278487595744525177460939465622410473654789382565188319818335934171653755811872501026071194087051, 10240139028494174526454562399217609608280817984150287983207668274231906642607868694849967043415262875107269045985517134901896201464915880088854955991401353416951487254838341232922059441309704096261457984093029892511268213868493162068362288179130193503313930139616441614927005917140608739837772400963531761014330142192223670723732255263011157267423056439150678533763741625000032136535639171133174846473584929951274026212224887370702861958817381113058491861009468609746592170191042660753210307932264867242863839876056977399186229782377108228334204340285592604094505980554432810891123635608989340677684302928462277247999)]]\n\ni, p = find_factors(data)\nn = data[i][0]\nc, s = data[i][1]\nq = n // p\n\nprint(decrypt(c, n, p, q, s))\n```\n\n#### Flag\n\n`ASIS{1N_h0nOr_oF__Lenore__C4r0l_Blum}",
      "begin{align}",
      "end{align}",
      "begin{align}",
      "end{align}",
      "ASIS{I7s__Fueter-PoLy4__c0nJ3c7UrE_iN_p4Ir1n9_FuNCT10n}",
      "CTF{this_wasnt_elliptic_curve_after_all}",
      "mathbb{F}",
      "_{p}",
      "mathbb{F}",
      "_{p}",
      "mathbb{F}",
      "_{p^n}",
      "mathbb{F}",
      "_{p}",
      "mathbb{F}",
      "frac{x_1 x_2 + x_1 y_2 - x_2 y_1 + 2y_1 y_2}",
      "frac{y_1 y_2}",
      "frac{x^2 - 2xy + 2y^2}",
      "frac{y^2}",
      "frac{(x - y)^2}",
      "frac{(x - y)^3}",
      "frac{(x - y)^4}",
      "begin{align}",
      "t_{2P}",
      "frac{t^2}",
      "t_{3P}",
      "frac{t^3}",
      "t_{4P}",
      "frac{t^4}",
      "frac{t^4}",
      "end{align}",
      "frac{t^k}",
      "frac{1}",
      "frac{t^k - (t-1)^k}",
      "frac{t-1}",
      "frac{1}",
      "frac{1}",
      "frac{1}",
      "frac{1}",
      "h_{A}",
      "frac{1}",
      "h_{B}",
      "frac{1}",
      "mathbb{F}",
      "chCTF{this_wasnt_elliptic_curve_after_all}",
      "CTF{' in x:  \n        print(x)  \n        y = (n // d) + 1 \n        print(long_to_bytes(y))\n\nb'CCTF{S1mPL3_4Nd_N!cE_D'\nb'iophantine_EqUa7I0nS!}",
      "CTF{S1mPL3_4Nd_N!cE_Diophantine_EqUa7I0nS!}",
      "CTF{___Ra8!N_H_Cryp70_5YsT3M___}",
      "CTF{___Ra8!N_H_Cryp70_5YsT3M___}",
      "CTF{Congrats_Y0u_5OLv3d_x**2+y**2=z**7}",
      "CTF{Congrats_Y0u_5OLv3d_x**2+y**2=z**7}",
      "CTF{ECC_With_Special_Prime5}",
      "CTF{Pl4yIn9_Wi7H_ECC_1Z_liK3_pLAiNg_wiTh_Fir3!!}",
      "CTF{').rstrip(b'}",
      "CTF{nOt_50_3a5Y_Edw4rDs_3LlipT!c_CURv3}",
      "sqrt{4k}",
      "CCTF{' in x:  \n        print(x)  \n        y = (n // d) + 1 \n        print(long_to_bytes(y))\n\nb'CCTF{S1mPL3_4Nd_N!cE_D'\nb'iophantine_EqUa7I0nS!}",
      "CCTF{S1mPL3_4Nd_N!cE_Diophantine_EqUa7I0nS!}",
      "mathbb{Z}",
      "CCTF{___Ra8!N_H_Cryp70_5YsT3M___}",
      "CCTF{___Ra8!N_H_Cryp70_5YsT3M___}",
      "mathbb{Z}",
      "mathbb{Z}",
      "mathbb{Z}",
      "CCTF{Congrats_Y0u_5OLv3d_x**2+y**2=z**7}",
      "CCTF{Congrats_Y0u_5OLv3d_x**2+y**2=z**7}",
      "CCTF{ECC_With_Special_Prime5}",
      "frac{x}",
      "frac{G_x}",
      "frac{H_x}",
      "frac{h}",
      "CCTF{Pl4yIn9_Wi7H_ECC_1Z_liK3_pLAiNg_wiTh_Fir3!!}",
      "CCTF{').rstrip(b'}",
      "E_{c,d}",
      "A_{ij}",
      "B_{ij}",
      "frac{A_{12}",
      "B_{12}",
      "frac{A_{12}",
      "B_{12}",
      "frac{A_{34}",
      "B_{34}",
      "A_{12}",
      "B_{34}",
      "A_{34}",
      "B_{12}",
      "B_{12}",
      "B_{34}",
      "tilde{k}",
      "begin{aligned}",
      "Y_{1234}",
      "A_{12}",
      "B_{34}",
      "A_{34}",
      "B_{12}",
      "B_{12}",
      "B_{34}",
      "Y_{1324}",
      "A_{13}",
      "B_{24}",
      "A_{24}",
      "B_{13}",
      "B_{13}",
      "B_{24}",
      "Y_{1234}",
      "Y_{1324}",
      "end{aligned}",
      "frac{x_1^2 - x_2^2 + y_1^2 - y_2^2 }",
      "E_{c,d}",
      "frac{x}",
      "frac{y}",
      "E_{c}",
      "E_{A,B}",
      "frac{1 + y}",
      "frac{2(1 + y)}",
      "frac{2u}",
      "frac{4}",
      "frac{1}",
      "E_{a,b}",
      "frac{u}",
      "frac{A}",
      "frac{v}",
      "frac{3 - A^2}",
      "frac{2A^3 - 9A}",
      "CCTF{nOt_50_3a5Y_Edw4rDs_3LlipT!c_CURv3}",
      "E_{a,c}",
      "E_{a}",
      "E_{A,B}",
      "frac{4a^3}",
      "CHTB{Counting_points_with_Schoofs_algorithm}",
      "CHTB{Counting_points_with_Schoofs_algorithm}",
      "overset{?}",
      "CHTB{Elgamal_remember_to_hash_your_messages!}",
      "CHTB{??????????????????????????????????}",
      "mathbb{F}",
      "CHTB{Factoring_With_Fermats_Little_Theorem}",
      "CHTB{Factoring_With_Fermats_Little_Theorem}",
      "frac{4}",
      "frac{1}",
      "frac{1}",
      "frac{1}",
      "frac{4}",
      "frac{1}",
      "frac{1}",
      "frac{1}",
      "frac{4}",
      "frac{2}",
      "frac{2}",
      "frac{4}",
      "frac{4}",
      "frac{1}",
      "frac{1}",
      "frac{1}",
      "begin{aligned}",
      "end{aligned}",
      "frac{w-1}",
      "CHTB{Erdos-Straus-Conjecture}",
      "CHTB{Erdos-Straus-Conjecture}",
      "CHTB{Erdos-Straus-Conjecture}",
      "mathbb{C}",
      "mathbb{F}",
      "mathbb{J}",
      "mathbb{F}",
      "mathbb{F}",
      "mathbb{Q}",
      "sum_{y \\in \\mathbb{F}",
      "sum_{i = 1}",
      "prod_{i = 1}",
      "mathbb{N}",
      "frac{1}",
      "N_{i,j}",
      "mathbb{N}",
      "N_{0,1}",
      "mathbb{N}",
      "mathbb{F}",
      "frac{1}",
      "sqrt{-3}",
      "mathbb{Z}",
      "mathbb{Z}",
      "frac{a^n - 1}",
      "prod_{i=1}",
      "mathbb{Z}",
      "CHTB{hyp3r_sp33d_c0unting!!}",
      "CHTB{hyp3r_sp33d_c0unting!!}",
      "pmod{q^n}",
      "mathbb{V}",
      "CHTB{Imai_and_Matsumoto_play_with_multivariate_cryptography}",
      "CHTB{Imai_and_Matsumoto_play_with_multivariate_cryptography}",
      "HackTM{SanTa_ple@s3_TakE_mE_0ff_yOur_l1st_4f2d20ec18}",
      "HackTM{can_1_h@ve_y0ur_numb3r_5yst3m_??}",
      "else{\t\t\n   echo \"<b>Intruder!</b>\";\t\t\n }",
      "HackTM{HARDTIMES}",
      "INSA{REDACTED}",
      "INSA{I_w1ll_us3_OTp_n3xT_T1M3}",
      "INSA{REDACTED}",
      "INSA{Uh_never_give_4w4y_your_Pr1mes_I_m34n_duhhh}",
      "ctf{dr4_m1g_b4kl4ng3s}",
      "ctf{dr4_m1g_b4kl4ng3s}",
      "text{gcd}",
      "sctf{dr4_m1g_b4kl4ng3s}",
      "sctf{dr4_m1g_b4kl4ng3s}",
      "dice{?????????????????????????}",
      "begin{aligned}",
      "end{aligned}",
      "mathbb{Z}",
      "mathbb{Z}",
      "text{th}",
      "b_{ki}",
      "sum_{i=0}",
      "b_{ki}",
      "mathbf{M}",
      "begin{pmatrix}",
      "b_{10}",
      "b_{11}",
      "b_{12}",
      "b_{13}",
      "b_{14}",
      "b_{20}",
      "b_{21}",
      "b_{22}",
      "b_{32}",
      "b_{24}",
      "b_{30}",
      "b_{31}",
      "b_{32}",
      "b_{33}",
      "b_{34}",
      "b_{40}",
      "b_{41}",
      "b_{42}",
      "b_{43}",
      "b_{44}",
      "b_{50}",
      "b_{51}",
      "b_{52}",
      "b_{53}",
      "b_{54}",
      "end{pmatrix}",
      "mathbf{x}",
      "begin{pmatrix}",
      "end{pmatrix}",
      "mathbf{F}",
      "mathbf{M}",
      "mathbf{x}",
      "begin{pmatrix}",
      "end{pmatrix}",
      "mathbf{a}",
      "mathbf{M}",
      "mathbf{a}",
      "sum_{k=1}",
      "b_{k0}",
      "sum_{k=1}",
      "b_{kj}",
      "mathbf{a}",
      "sum_{i=1}",
      "sum_{i=1}",
      "mathbf{a}",
      "mathbf{M}",
      "mathbf{a}",
      "mathbf{M}",
      "dice{wh4t!!-wh0_g4ve_u-thE-k3y}",
      "pmod{\\phi(n)}",
      "mathcal{G}",
      "mathbb{Z}",
      "mathbb{Z}",
      "mathcal{G}",
      "mathcal{G}",
      "frac{rM}",
      "dice{the_m1n1gun_4nd_f1shb0nes_the_r0ck3t_launch3r}",
      "dice{?????????????????????????}",
      "begin{aligned}",
      "end{aligned}",
      "mathbb{Z}",
      "mathbb{Z}",
      "text{th}",
      "b_{ki}",
      "sum_{i=0}",
      "b_{ki}",
      "mathbf{M}",
      "begin{pmatrix}",
      "b_{10}",
      "b_{11}",
      "b_{12}",
      "b_{13}",
      "b_{14}",
      "b_{20}",
      "b_{21}",
      "b_{22}",
      "b_{32}",
      "b_{24}",
      "b_{30}",
      "b_{31}",
      "b_{32}",
      "b_{33}",
      "b_{34}",
      "b_{40}",
      "b_{41}",
      "b_{42}",
      "b_{43}",
      "b_{44}",
      "b_{50}",
      "b_{51}",
      "b_{52}",
      "b_{53}",
      "b_{54}",
      "end{pmatrix}",
      "mathbf{x}",
      "begin{pmatrix}",
      "end{pmatrix}",
      "mathbf{F}",
      "mathbf{M}",
      "mathbf{x}",
      "begin{pmatrix}",
      "end{pmatrix}",
      "mathbf{a}",
      "mathbf{M}",
      "mathbf{a}",
      "sum_{k=1}",
      "b_{k0}",
      "sum_{k=1}",
      "b_{kj}",
      "mathbf{a}",
      "sum_{i=1}",
      "sum_{i=1}",
      "mathbf{a}",
      "mathbf{M}",
      "mathbf{a}",
      "mathbf{M}",
      "dice{wh4t!!-wh0_g4ve_u-thE-k3y}",
      "ctf{h0w_d3d_y3u_de3cryP4_th3_s1p3R_s3cuR3_m355a9e?}",
      "ctf{h0w_d3d_y3u_de3cryP4_th3_s1p3R_s3cuR3_m355a9e?}",
      "ctf{y3s_rsa_1s_s0lved_10823704961253}",
      "ctf{y3s_rsa_1s_s0lved_10823704961253}",
      "ctf{forg0t_t0_mult1ply_prim3s}",
      "ctf{forg0t_t0_mult1ply_prim3s}",
      "ctf{square_number_time}",
      "ctf{square_number_time}",
      "ctf{th1s_1s_0ne_v3ry_l0ng_fl@g_b3ca8s3_t5x_l0v3z_vveR9_LOn9_flaGs7!}",
      "ctf{thiii111iiiss_isssss_yo0ur_b1rthd4y_s0ng_it_isnt_very_long_6621}",
      "ctf{th1s_1s_0ne_v3ry_l0ng_fl@g_b3ca8s3_t5x_l0v3z_vveR9_LOn9_flaGs7!}",
      "ctf{d1d_y0ur_b0mbe_s4cc33d???-961451631955}",
      "ctf{d1d_y0ur_b0mbe_s4cc33d???-961451631955}",
      "ctf{Anomalous curves, m0ar like anom00se curves}",
      "ctf{Anomalous curves, m0ar like anom00se curves}",
      "hsctf{h0w_d3d_y3u_de3cryP4_th3_s1p3R_s3cuR3_m355a9e?}",
      "hsctf{h0w_d3d_y3u_de3cryP4_th3_s1p3R_s3cuR3_m355a9e?}",
      "hsctf{y3s_rsa_1s_s0lved_10823704961253}",
      "hsctf{y3s_rsa_1s_s0lved_10823704961253}",
      "hsctf{forg0t_t0_mult1ply_prim3s}",
      "hsctf{forg0t_t0_mult1ply_prim3s}",
      "frac{1}",
      "frac{1}",
      "frac{1}",
      "frac{1}",
      "frac{1}",
      "frac{1}",
      "hsctf{square_number_time}",
      "hsctf{square_number_time}",
      "hsctf{th1s_1s_0ne_v3ry_l0ng_fl@g_b3ca8s3_t5x_l0v3z_vveR9_LOn9_flaGs7!}",
      "hsctf{thiii111iiiss_isssss_yo0ur_b1rthd4y_s0ng_it_isnt_very_long_6621}",
      "hsctf{th1s_1s_0ne_v3ry_l0ng_fl@g_b3ca8s3_t5x_l0v3z_vveR9_LOn9_flaGs7!}",
      "hsctf{d1d_y0ur_b0mbe_s4cc33d???-961451631955}",
      "hsctf{d1d_y0ur_b0mbe_s4cc33d???-961451631955}",
      "hsctf{Anomalous curves, m0ar like anom00se curves}",
      "hsctf{Anomalous curves, m0ar like anom00se curves}",
      "E_{AB}",
      "stackrel{?}",
      "tilde{E}",
      "tilde{e}",
      "tilde{Q}",
      "hat{\\phi}",
      "tilde{Q}",
      "hat{\\phi}",
      "hat{\\phi}",
      "tilde{e}",
      "tilde{e}",
      "ptm{w31l_p41r1ng_c0mpu73s_53cr37_150g3n13s!!}",
      "CTF{W3_likE_M0bIu5_B4nD_aZ_W3dD!n9_rInG}",
      "CTF{W3_likE_M0bIu5_B4nD_aZ_W3dD!n9_rInG}",
      "sum_{d | n}",
      "begin{align*}",
      "sum_{d | n}",
      "frac{n}",
      "sum_{d | n}",
      "frac{n}",
      "end{align*}",
      "sum_{d | n}",
      "sum_{d | n}",
      "frac{n}",
      "sum_{d | n}",
      "sum_{d | x}",
      "frac{x}",
      "tilde{f}",
      "sum_{d|n}",
      "CCTF{W3_likE_M0bIu5_B4nD_aZ_W3dD!n9_rInG}",
      "CCTF{W3_likE_M0bIu5_B4nD_aZ_W3dD!n9_rInG}",
      "sum_{d | N}",
      "sum_{d | n}",
      "begin{align*}",
      "end{align*}",
      "tilde{F}",
      "CTF{p}",
      "CTF{61}",
      "CTF{l3arn_th3_r0p35}",
      "CTF{grep_is_good_to_find_things_5f0c3d9e}",
      "CTF{grep_is_good_to_find_things_5f0c3d9e}",
      "CTF{r3source_pag3_f1ag}",
      "CTF{5tRIng5_1T_30be4706}",
      "CTF{5tRIng5_1T_30be4706}",
      "CTF{nEtCat_Mast3ry_589c8b71}",
      "CTF{learning_about_converting_values_2360e4dd}",
      "CTF{learning_about_converting_values_2360e4dd}",
      "CTF{3asY_P3a5y8645475a}",
      "CTF{n0w_w3r3_ChaNg1ng_r3tURn56b6d6d97}",
      "CTF{arg5_and_r3turn5dc972417}",
      "CTF{th4t_w4snt_t00_d1ff3r3nt_r1ghT?_351346a2}",
      "CTF{r0p_1t_d0nT_st0p_1t_b3358018}",
      "CTF{r0p_1t_d0nT_st0p_1t_b3358018}",
      "CTF{THENUMBERSMASON}",
      "CTF{not_too_bad_of_a_problem}",
      "CTF{CRYPTOISFUN}",
      "CTF{vkhllbgzmaxknubvhglzeipcie}",
      "CTF{crossingtherubiconsglpwjpl}",
      "CTF{F1AG5AND5TUFF}",
      "CTF{(35.028309, 135.753082)(46.469391, 30.740883)(39.758949, -84.191605)(41.015137, 28.979530)(24.466667, 54.366669)(3.140853, 101.693207)_(9.005401, 38.763611)(-3.989038, -79.203560)(52.377956, 4.897070)(41.085651, -73.858467)(57.790001, -152.407227)(31.205753, 29.924526)}",
      "CTF{KODIAK_ALASKA}",
      "CTF{M0RS3C0D31SFUN3524946471}",
      "CTF{b311a50_0r_v1gn3r3_c1ph3r8e3b3a15}",
      "CTF{b311a50_0r_v1gn3r3_c1ph3r8e3b3a15}",
      "CTF{wA8_th4t$_ill3aGal..o6e437df2}",
      "CTF{n33d_a_lArg3r_e_e8e7052f}",
      "CTF{bad_1d3a5_5533202}",
      "CTF{too_many_fact0rs_2020200}",
      "CTF{73176001,67867967}",
      "CTF{unz1pp1ng_1s_3a5y}",
      "CTF{s0_m3ta_74e57c5c}",
      "CTF{h1d1ng_1n_th3_b1t5}",
      "CTF{h1d1ng_1n_th3_b1t5}",
      "CTF{now_you_know_about_extensions}",
      "CTF{not_all_spaces_are_created_equal_3175ae38e9f456ea0e62ca07260b71a2}",
      "CTF{not_all_spaces_are_created_equal_3175ae38e9f456ea0e62ca07260b71a2}",
      "CTF{beep_boop_im_in_space}",
      "CTF{pa$ta_1s_lyf3}",
      "CTF{tru3_d3 -->\n\n/* You need CSS to make pretty pages. Here's part 2/3 of the flag: t3ct1ve_0r_ju5t */\n\n/* Javascript sure is neat. Anyways part 3/3 of the flag: _lucky?d76327a1}",
      "CTF{tru3_d3t3ct1ve_0r_ju5t_lucky?d76327a1}",
      "CTF{') {\n         if (checkpass.substring(split*4, split*5) == 'ts_p') {\n          if (checkpass.substring(split*3, split*4) == 'lien') {\n            if (checkpass.substring(split*5, split*6) == 'lz_2') {\n              if (checkpass.substring(split*2, split*3) == 'no_c') {\n                if (checkpass.substring(split*7, split*8) == 'a}",
      "CTF{no_clients_plz_24454a}",
      "CTF{ca1cu1at1ng_Mach1n3s_a262d}",
      "CTF{not_this_again_6c2047}",
      "CTF{p1c0_s3cr3t_ag3nt_665ad8a4}",
      "CTF{65df43eff650d95dc1a21fef00d3d1b0}",
      "CTF{ec4fe193b0ebd7e2c20e701f493263d6}",
      "picoCTF{p}",
      "picoCTF{61}",
      "picoCTF{l3arn_th3_r0p35}",
      "picoCTF{grep_is_good_to_find_things_5f0c3d9e}",
      "picoCTF{grep_is_good_to_find_things_5f0c3d9e}",
      "picoCTF{r3source_pag3_f1ag}",
      "picoCTF{5tRIng5_1T_30be4706}",
      "picoCTF{5tRIng5_1T_30be4706}",
      "picoCTF{nEtCat_Mast3ry_589c8b71}",
      "picoCTF{learning_about_converting_values_2360e4dd}",
      "picoCTF{learning_about_converting_values_2360e4dd}",
      "picoCTF{3asY_P3a5y8645475a}",
      "picoCTF{n0w_w3r3_ChaNg1ng_r3tURn56b6d6d97}",
      "picoCTF{arg5_and_r3turn5dc972417}",
      "picoCTF{th4t_w4snt_t00_d1ff3r3nt_r1ghT?_351346a2}",
      "picoCTF{r0p_1t_d0nT_st0p_1t_b3358018}",
      "picoCTF{r0p_1t_d0nT_st0p_1t_b3358018}",
      "PICOCTF{THENUMBERSMASON}",
      "cvpbPGS{abg_gbb_onq_bs_n_ceboyrz}",
      "picoCTF{not_too_bad_of_a_problem}",
      "picoCTF{CRYPTOISFUN}",
      "picoCTF{vkhllbgzmaxknubvhglzeipcie}",
      "picoCTF{crossingtherubiconsglpwjpl}",
      "PICOCTF{F1AG5AND5TUFF}",
      "picoCTF{(35.028309, 135.753082)(46.469391, 30.740883)(39.758949, -84.191605)(41.015137, 28.979530)(24.466667, 54.366669)(3.140853, 101.693207)_(9.005401, 38.763611)(-3.989038, -79.203560)(52.377956, 4.897070)(41.085651, -73.858467)(57.790001, -152.407227)(31.205753, 29.924526)}",
      "picoCTF{KODIAK_ALASKA}",
      "PICOCTF{M0RS3C0D31SFUN3524946471}",
      "hgqqpohzCZK{m311a50_0x_a1rn3x3_h1ah3x8j3m3a15}",
      "halfpicoCTF{b311a50_0r_v1gn3r3_c1ph3r8e3b3a15}",
      "picoCTF{b311a50_0r_v1gn3r3_c1ph3r8e3b3a15}",
      "frac{n}",
      "frac{5051846941}",
      "picoCTF{wA8_th4t$_ill3aGal..o6e437df2}",
      "picoCTF{n33d_a_lArg3r_e_e8e7052f}",
      "picoCTF{bad_1d3a5_5533202}",
      "picoCTF{too_many_fact0rs_2020200}",
      "picoCTF{73176001,67867967}",
      "picoCTF{unz1pp1ng_1s_3a5y}",
      "picoCTF{s0_m3ta_74e57c5c}",
      "picoCTF{h1d1ng_1n_th3_b1t5}",
      "picoCTF{h1d1ng_1n_th3_b1t5}",
      "picoCTF{now_you_know_about_extensions}",
      "picoCTF{not_all_spaces_are_created_equal_3175ae38e9f456ea0e62ca07260b71a2}",
      "picoCTF{not_all_spaces_are_created_equal_3175ae38e9f456ea0e62ca07260b71a2}",
      "picoCTF{beep_boop_im_in_space}",
      "picoCTF{pa$ta_1s_lyf3}",
      "picoCTF{tru3_d3 -->\n\n/* You need CSS to make pretty pages. Here's part 2/3 of the flag: t3ct1ve_0r_ju5t */\n\n/* Javascript sure is neat. Anyways part 3/3 of the flag: _lucky?d76327a1}",
      "picoCTF{tru3_d3t3ct1ve_0r_ju5t_lucky?d76327a1}",
      "CTF{') {\n         if (checkpass.substring(split*4, split*5) == 'ts_p') {\n          if (checkpass.substring(split*3, split*4) == 'lien') {\n            if (checkpass.substring(split*5, split*6) == 'lz_2') {\n              if (checkpass.substring(split*2, split*3) == 'no_c') {\n                if (checkpass.substring(split*7, split*8) == 'a}",
      "picoCTF{no_clients_plz_24454a}",
      "picoCTF{ca1cu1at1ng_Mach1n3s_a262d}",
      "F{not') {\n         if (checkpass[_0x4b5b('0x2')](split * 0x2 * 0x2, split * 0x3 * 0x2) == _0x4b5b('0x6')) {\n          if (checkpass[_0x4b5b('0x2')](0xc, 0x10) == _0x4b5b('0x7')) {\n           alert(_0x4b5b('0x8'));\n          }",
      "picoCTF{not_this_again_6c2047}",
      "picoCTF{p1c0_s3cr3t_ag3nt_665ad8a4}",
      "picoCTF{65df43eff650d95dc1a21fef00d3d1b0}",
      "picoCTF{ec4fe193b0ebd7e2c20e701f493263d6}",
      "flag{y0u_f0und_m0re_th4n_s3cr3ts.....th3_fl4g_1ts3lf!!!!}",
      "flag{s0m3t1m3s_crypt0gr4ph1c_1mpl3m3nt4t10ns_f41l}",
      "flag{I_dont_know_what_this_is}",
      "flag{I_dont_know_what_this_is}",
      "flag{y0u_f0und_m0re_th4n_s3cr3ts.....th3_fl4g_1ts3lf!!!!}",
      "flag{s0m3t1m3s_crypt0gr4ph1c_1mpl3m3nt4t10ns_f41l}",
      "flag{I_dont_know_what_this_is}",
      "flag{I_dont_know_what_this_is}",
      "begin{aligned}",
      "end{aligned}",
      "frac{Q_y - P_y}",
      "sqrt{Q_x^3 + a Q_x + b}",
      "begin{aligned}",
      "frac{Q_y - P_y}",
      "end{aligned}",
      "begin{aligned}",
      "end{aligned}",
      "tilde{f}",
      "zer0pts{7h4nk_y0u_j4ck_7h4nk_y0u_cr0wn}",
      "zer0pts{7h4nk_y0u_j4ck_7h4nk_y0u_cr0wn}"
    ],
    "learning_points": [
      "solution_methodology",
      "practical_application",
      "research_insights",
      "ctf_strategy",
      "challenge_analysis",
      "theoretical_background"
    ]
  },
  "files": [
    {
      "path": "0CTF/readme.md",
      "type": "ctf_writeup",
      "size": 22381,
      "content_preview": "# 0CTF\n\nI played this CTF as part of the team Organisers. These challenges were solved as a big group effort including British EBFE, Esrever, Robin and V01d. The crypto challenges of this competition were really interesting and challening. I feel lucky to have been able to play with such a talented team, who helped show me how these more advanced challenges can be interpreted and solved. \n\n## Gene\n\n#### Step Zero: Guessing\n\nBefore the crypto side of this challenge can begin the first thing we ne",
      "knowledge": {
        "techniques": [
          "elliptic curve",
          "rsa",
          "discrete log",
          "sage",
          "python"
        ],
        "algorithms": [],
        "tools": [
          "sage",
          "python",
          "pari"
        ],
        "attacks": [],
        "flags": [
          "flag{TTAUUTCAGUGUGGTTGAAUAUAT}",
          "flag{' and flag[-1:] == b'}",
          "flag{'+flag+'}",
          "flag{1nTere5tinG_Hyp3re11iPtic_curv3}",
          "flag{1nTere5tinG_Hyp3re11iPtic_curv3}",
          "text{show_me_flag}",
          "frac{s - s^\\prime}",
          "flag{TTAUUTCAGUGUGGTTGAAUAUAT}",
          "flag{' and flag[-1:] == b'}",
          "mathbb{Z}",
          "flag{'+flag+'}",
          "flag{1nTere5tinG_Hyp3re11iPtic_curv3}",
          "flag{1nTere5tinG_Hyp3re11iPtic_curv3}"
        ],
        "learning_points": [
          "ctf_strategy",
          "challenge_analysis",
          "solution_methodology"
        ]
      }
    },
    {
      "path": "ASIS-Quals-2020/readme.md",
      "type": "ctf_writeup",
      "size": 39398,
      "content_preview": "# ASIS Quals 2020\n\nA handful of write ups from some of the crypto challenges from ASIS 2020 Quals. Thanks to Aurel, Hrpr and Hyperreality for the tips while solving these. Cr0wn came 16th overall, and I learnt that I really need to get to grips with multivariate polynomials because Tripolar was solved by a bunch of teams and I just couldn't crack it...\n\n\n## Contents\n\n| Challenge                         | Points |\n| --------------------------------- | -----: |\n| [Baby RSA](#baby-rsa)             ",
      "knowledge": {
        "techniques": [
          "elliptic curve",
          "rsa",
          "sage",
          "python"
        ],
        "algorithms": [],
        "tools": [
          "sage",
          "python"
        ],
        "attacks": [
          "chosen plaintext"
        ],
        "flags": [
          "mathbf{Z}",
          "frac{d-1}",
          "begin{align}",
          "frac{ed-e}",
          "frac{k\\phi(n) + 1 -e}",
          "frac{k\\phi(n)}",
          "frac{1-e}",
          "end{align}",
          "frac{k\\phi(n)}",
          "frac{k}",
          "frac{1-e}",
          "begin{align}",
          "end{align}",
          "ASIS{baby___RSA___f0r_W4rM_uP}",
          "ASIS{baby___RSA___f0r_W4rM_uP}",
          "ASIS{4n_Ellip71c_curve_iZ_A_pl4Ne_al9ebr4iC_cUrv3}",
          "s_{t+1}",
          "vec{c}",
          "vec{a}",
          "vec{a}",
          "vec{c}",
          "s_{i+1}",
          "ASIS{BlUM_G0ldwaS53R_cryptOsySt3M_Iz_HI9hlY_vUlNEr4bl3_70_CCA!?}",
          "ASIS{BlUM_G0ldwaS53R_cryptOsySt3M_Iz_HI9hlY_vUlNEr4bl3_70_CCA!?}",
          "ASIS{`. The script takes seconds and finds the flag.\n\n\n\n### Implementation\n\n```python\nfrom Crypto.Util.number import *\nimport math\n\ndef find_factors(data):\n\tdata_length = len(data)\n\tfor i in range(data_length):\n\t\tp = data[i][0]\n\t\tfor j in range(i+1,data_length):\n\t\t\tx = data[j][0]\n\t\t\tif math.gcd(p,x) != 1:\n\t\t\t\treturn i, math.gcd(p,x)\n\t\t\t\n\ndef encrypt(msg, pubkey, xorkey):\n\th = len(bin(len(bin(pubkey)[2:]))[2:]) - 1\t# dirty log :/\n\tm = bytes_to_long(msg)\n\tif len(bin(m)[2:]) % h != 0:\n\t\tm = '0' * (h - len(bin(m)[2:]) % h) + bin(m)[2:]\n\telse:\n\t\tm = bin(m)[2:]\n\tt = len(m) // h\n\tM = [m[h*i:h*i+h] for i in range(t)]\n\tr = random.randint(1, pubkey)\n\ts_0 = pow(r, 2, pubkey)\n\tC = []\n\tfor i in range(t):\n\t\ts_i = pow(s_0, 2, pubkey)\n\t\tk = bin(s_i)[2:][-h:]\n\t\tc = bin(int(M[i], 2) ^ int(k, 2) & xorkey)[2:].zfill(h)\n\t\tC.append(c)\n\t\ts_0 = s_i\n\tenc = int(''.join(C), 2)\n\treturn (enc, pow(s_i, 2, pubkey))\n\n\ndef xgcd(a, b):\n    \"\"\"return (g, x, y) such that a*x + b*y = g = gcd(a, b)\"\"\"\n    x0, x1, y0, y1 = 0, 1, 1, 0\n    while a != 0:\n        (q, a), b = divmod(b, a), a\n        y0, y1 = y1, y0 - q * y1\n        x0, x1 = x1, x0 - q * x1\n    return b, x0, y0\n\n\ndef decrypt(c, pubkey, p, q, s):\n\t# Idiot checks\n\tassert p*q == pubkey\n\tassert isPrime(p) and isPrime(q)\n\n\th = len(bin(len(bin(pubkey)[2:]))[2:]) - 1\t# dirty log :/\n\tif len(bin(c)[2:]) % h != 0:\n\t\tc = '0' * (h - len(bin(c)[2:]) % h) + bin(c)[2:]\n\telse:\n\t\tc = bin(c)[2:]\n\tt = len(c) // h\n\n\t# Recover s0\n\tdp = (((p + 1) // 4)**(t + 1)) % (p - 1)\n\tdq = (((q + 1) // 4)**(t + 1)) % (q - 1)\n\tup = pow(s, dp, p)\n\tuq = pow(s, dq, q)\n\t_, rp, rq = xgcd(p,q)\n\ts0 = (uq * rp * p + up * rq * q ) % pubkey\n\n\n\tC = [c[h*i:h*i+h] for i in range(t)]\n\n\t# Brute xorkey (max size: 2**10 - 1)\n\tflags = []\n\tfor X in range(1024):\n\t\t# Restore value for brute, and empty M\n\t\ts_0 = s0\n\t\tM = []\n\n\t\tfor i in range(t):\n\t\t\ts_i = pow(s_0, 2, pubkey)\n\t\t\tk = bin(s_i)[2:][-h:]\n\t\t\tm = bin(int(C[i], 2) ^ int(k, 2) & X)[2:].zfill(h)\n\t\t\tM.append(m)\n\t\t\ts_0 = s_i\n\t\t\t\n\t\tfl = long_to_bytes(int(''.join(M),2))\n\t\ttry:\n\t\t\tflag = fl.decode()\n\t\t\tif \"ASIS{\" in flag:\n\t\t\t\tflags.append(flag)\n\t\texcept:\n\t\t\tpass\n\treturn flags\n\n# data from challenge.txt, truncated to only two values save space\ndata = [[12097881278174698631026228331130314850080947749821686944446636213641310652138488716240453597129801720504043924252478136044035819232933933717808745477909546176235871786148513645805314150829468800301698799525780070273753857243854268554322340900904051857831398492096742127894417784386491191471947863787022245824307084379225579368393254254088207494229400873467930160606087032014972366802086915193167585867760542665623158008113534159892785943512727008525032377162641992852773743617023163398493300810949683112862817889094615912113456275357250831609021007534115476194023075806921879501827098755262073621876526524581992383113, (238917053353586684315740899995117428310480789049456179039998548040503724437945996038505262855730406127564439624355248861040378761737917431951065125651177801663731449217955736133484999926924447066163260418501214626962823479203542542670429310307929651996028669399692119495087327652345, 2361624084930103837444679853087134813420441002241341446622609644025375866099233019653831282014136118204068405467230446591931324445417288447017795525046075282581037551835081365996994851977871855718435321568545719382569106432442084085157579504951352401314610314893848177952589894962335072249886688614676995039846245628481594015356555808852415257590789843672862086889766599032421071154614466932749223855909572291554620301269793104658552481172052104139007105875898227773975867750358642521359331140861015951930087364330158718293540721277710068251667789725792771210694545702423605041261814818477350926741922865054617709373)],[11618071445988286159614546200227554667389205281749443004629117264129957740203770615641847148204810865669191685874152730267573467338950993270113782537765608776375192263405546036787453939829561684834308717115775768421300006618296897365279937358126799904528083922552306565620644818855350306352024366076974759484150214528610355358152789696678410732699598714566977211903625075198935310947340456263339204820065134900427056843183640181066232714511087292771420839344635982165997540089604798288048766074061479118366637656581936395586923631199316711697776366024769039316868119838263452674798226118946060593631451490164411150841, (108436642448932709219121968294434475477600203743366957190466733100162456074942118592019300422638950272524217814290069806411298263273760197756252555274382639125596214182186934977255300451278487595744525177460939465622410473654789382565188319818335934171653755811872501026071194087051, 10240139028494174526454562399217609608280817984150287983207668274231906642607868694849967043415262875107269045985517134901896201464915880088854955991401353416951487254838341232922059441309704096261457984093029892511268213868493162068362288179130193503313930139616441614927005917140608739837772400963531761014330142192223670723732255263011157267423056439150678533763741625000032136535639171133174846473584929951274026212224887370702861958817381113058491861009468609746592170191042660753210307932264867242863839876056977399186229782377108228334204340285592604094505980554432810891123635608989340677684302928462277247999)]]\n\ni, p = find_factors(data)\nn = data[i][0]\nc, s = data[i][1]\nq = n // p\n\nprint(decrypt(c, n, p, q, s))\n```\n\n#### Flag\n\n`ASIS{1N_h0nOr_oF__Lenore__C4r0l_Blum}",
          "begin{align}",
          "end{align}",
          "begin{align}",
          "end{align}",
          "ASIS{I7s__Fueter-PoLy4__c0nJ3c7UrE_iN_p4Ir1n9_FuNCT10n}"
        ],
        "learning_points": [
          "ctf_strategy",
          "challenge_analysis",
          "solution_methodology"
        ]
      }
    },
    {
      "path": "Chujowy/readme.md",
      "type": "ctf_writeup",
      "size": 8909,
      "content_preview": "# Chujowy CTF\n\nI loved this CTF, there were some great crypto challenges, that all felt well made and interesting. For now, I'm going to write up the most interesting: **Real ECC**, but might come back to this and add in how I solved the three RSA challenges. Thanks to Chujowy for hosting this CTF.\n\n\n## Contents\n\n| Challenge             | Points |\n| --------------------- | -----: |\n| [Real ECC](#real-ecc) |    470 |\n\n\n## Real ECC\n\n### Disclaimer\n\n> ⚠️ I didn't realise this during the CTF, but an",
      "knowledge": {
        "techniques": [
          "elliptic curve",
          "rsa",
          "discrete log",
          "sage",
          "python",
          "pohlig-hellman"
        ],
        "algorithms": [],
        "tools": [
          "sage",
          "python"
        ],
        "attacks": [],
        "flags": [
          "CTF{this_wasnt_elliptic_curve_after_all}",
          "mathbb{F}",
          "_{p}",
          "mathbb{F}",
          "_{p}",
          "mathbb{F}",
          "_{p^n}",
          "mathbb{F}",
          "_{p}",
          "mathbb{F}",
          "frac{x_1 x_2 + x_1 y_2 - x_2 y_1 + 2y_1 y_2}",
          "frac{y_1 y_2}",
          "frac{x^2 - 2xy + 2y^2}",
          "frac{y^2}",
          "frac{(x - y)^2}",
          "frac{(x - y)^3}",
          "frac{(x - y)^4}",
          "begin{align}",
          "t_{2P}",
          "frac{t^2}",
          "t_{3P}",
          "frac{t^3}",
          "t_{4P}",
          "frac{t^4}",
          "frac{t^4}",
          "end{align}",
          "frac{t^k}",
          "frac{1}",
          "frac{t^k - (t-1)^k}",
          "frac{t-1}",
          "frac{1}",
          "frac{1}",
          "frac{1}",
          "frac{1}",
          "h_{A}",
          "frac{1}",
          "h_{B}",
          "frac{1}",
          "mathbb{F}",
          "chCTF{this_wasnt_elliptic_curve_after_all}"
        ],
        "learning_points": [
          "ctf_strategy",
          "challenge_analysis",
          "solution_methodology"
        ]
      }
    },
    {
      "path": "CryptoCTF-2021/index.md",
      "type": "ctf_writeup",
      "size": 46190,
      "content_preview": "# CryptoCTF 2021\n\nThis year, I played CryptoCTF with CryptoHackers. Full write ups for all challenges are on the [CryptoHack blog](https://blog.cryptohack.org). Below are the write-ups I authored after the event.\n\n\n## Challenges\n\n| Challenge Name                   | Category              | Points  |\n|----------------------------------|-----------------------|--------:|\n| [Titu](#titu)                    | Diophantine equations | 69      |\n| [Maid](#maid)                    | Rabin Cryptosystem  ",
      "knowledge": {
        "techniques": [
          "elliptic curve",
          "rsa",
          "discrete log",
          "sage",
          "python"
        ],
        "algorithms": [],
        "tools": [
          "sage",
          "python"
        ],
        "attacks": [],
        "flags": [
          "CTF{' in x:  \n        print(x)  \n        y = (n // d) + 1 \n        print(long_to_bytes(y))\n\nb'CCTF{S1mPL3_4Nd_N!cE_D'\nb'iophantine_EqUa7I0nS!}",
          "CTF{S1mPL3_4Nd_N!cE_Diophantine_EqUa7I0nS!}",
          "CTF{___Ra8!N_H_Cryp70_5YsT3M___}",
          "CTF{___Ra8!N_H_Cryp70_5YsT3M___}",
          "CTF{Congrats_Y0u_5OLv3d_x**2+y**2=z**7}",
          "CTF{Congrats_Y0u_5OLv3d_x**2+y**2=z**7}",
          "CTF{ECC_With_Special_Prime5}",
          "CTF{Pl4yIn9_Wi7H_ECC_1Z_liK3_pLAiNg_wiTh_Fir3!!}",
          "CTF{').rstrip(b'}",
          "CTF{nOt_50_3a5Y_Edw4rDs_3LlipT!c_CURv3}",
          "sqrt{4k}",
          "CCTF{' in x:  \n        print(x)  \n        y = (n // d) + 1 \n        print(long_to_bytes(y))\n\nb'CCTF{S1mPL3_4Nd_N!cE_D'\nb'iophantine_EqUa7I0nS!}",
          "CCTF{S1mPL3_4Nd_N!cE_Diophantine_EqUa7I0nS!}",
          "mathbb{Z}",
          "CCTF{___Ra8!N_H_Cryp70_5YsT3M___}",
          "CCTF{___Ra8!N_H_Cryp70_5YsT3M___}",
          "mathbb{Z}",
          "mathbb{Z}",
          "mathbb{Z}",
          "CCTF{Congrats_Y0u_5OLv3d_x**2+y**2=z**7}",
          "CCTF{Congrats_Y0u_5OLv3d_x**2+y**2=z**7}",
          "CCTF{ECC_With_Special_Prime5}",
          "frac{x}",
          "frac{G_x}",
          "frac{H_x}",
          "frac{h}",
          "CCTF{Pl4yIn9_Wi7H_ECC_1Z_liK3_pLAiNg_wiTh_Fir3!!}",
          "CCTF{').rstrip(b'}",
          "E_{c,d}",
          "A_{ij}",
          "B_{ij}",
          "frac{A_{12}",
          "B_{12}",
          "frac{A_{12}",
          "B_{12}",
          "frac{A_{34}",
          "B_{34}",
          "A_{12}",
          "B_{34}",
          "A_{34}",
          "B_{12}",
          "B_{12}",
          "B_{34}",
          "tilde{k}",
          "begin{aligned}",
          "Y_{1234}",
          "A_{12}",
          "B_{34}",
          "A_{34}",
          "B_{12}",
          "B_{12}",
          "B_{34}",
          "Y_{1324}",
          "A_{13}",
          "B_{24}",
          "A_{24}",
          "B_{13}",
          "B_{13}",
          "B_{24}",
          "Y_{1234}",
          "Y_{1324}",
          "end{aligned}",
          "frac{x_1^2 - x_2^2 + y_1^2 - y_2^2 }",
          "E_{c,d}",
          "frac{x}",
          "frac{y}",
          "E_{c}",
          "E_{A,B}",
          "frac{1 + y}",
          "frac{2(1 + y)}",
          "frac{2u}",
          "frac{4}",
          "frac{1}",
          "E_{a,b}",
          "frac{u}",
          "frac{A}",
          "frac{v}",
          "frac{3 - A^2}",
          "frac{2A^3 - 9A}",
          "CCTF{nOt_50_3a5Y_Edw4rDs_3LlipT!c_CURv3}",
          "E_{a,c}",
          "E_{a}",
          "E_{A,B}"
        ],
        "learning_points": [
          "ctf_strategy",
          "challenge_analysis",
          "solution_methodology"
        ]
      }
    },
    {
      "path": "Cyber-Apocalypse-2021/readme.md",
      "type": "ctf_writeup",
      "size": 41719,
      "content_preview": "# Cyber Apocalypse CTF 2021\n\nHere are the write-ups to the challenges I helped make for the CTF CryptoHack and Hack the Box collaborated on. As a team, CryptoHack wrote 17 challenges which became the crypto category of the CTF. A full write-up and discussion of the CTF is given on our [blog](https://blog.cryptohack.org/cyber-apocalypse-2021).\n\n## Contents\n\n| Challenge Name                                               | Category                      | Difficulty | Solves |\n| --------------------",
      "knowledge": {
        "techniques": [
          "elliptic curve",
          "rsa",
          "des",
          "discrete log",
          "sage",
          "sagemath",
          "python"
        ],
        "algorithms": [],
        "tools": [
          "sage",
          "python",
          "pari"
        ],
        "attacks": [],
        "flags": [
          "frac{4a^3}",
          "CHTB{Counting_points_with_Schoofs_algorithm}",
          "CHTB{Counting_points_with_Schoofs_algorithm}",
          "overset{?}",
          "CHTB{Elgamal_remember_to_hash_your_messages!}",
          "CHTB{??????????????????????????????????}",
          "mathbb{F}",
          "CHTB{Factoring_With_Fermats_Little_Theorem}",
          "CHTB{Factoring_With_Fermats_Little_Theorem}",
          "frac{4}",
          "frac{1}",
          "frac{1}",
          "frac{1}",
          "frac{4}",
          "frac{1}",
          "frac{1}",
          "frac{1}",
          "frac{4}",
          "frac{2}",
          "frac{2}",
          "frac{4}",
          "frac{4}",
          "frac{1}",
          "frac{1}",
          "frac{1}",
          "begin{aligned}",
          "end{aligned}",
          "frac{w-1}",
          "CHTB{Erdos-Straus-Conjecture}",
          "CHTB{Erdos-Straus-Conjecture}",
          "CHTB{Erdos-Straus-Conjecture}",
          "mathbb{C}",
          "mathbb{F}",
          "mathbb{J}",
          "mathbb{F}",
          "mathbb{F}",
          "mathbb{Q}",
          "sum_{y \\in \\mathbb{F}",
          "sum_{i = 1}",
          "prod_{i = 1}",
          "mathbb{N}",
          "frac{1}",
          "N_{i,j}",
          "mathbb{N}",
          "N_{0,1}",
          "mathbb{N}",
          "mathbb{F}",
          "frac{1}",
          "sqrt{-3}",
          "mathbb{Z}",
          "mathbb{Z}",
          "frac{a^n - 1}",
          "prod_{i=1}",
          "mathbb{Z}",
          "CHTB{hyp3r_sp33d_c0unting!!}",
          "CHTB{hyp3r_sp33d_c0unting!!}",
          "pmod{q^n}",
          "mathbb{V}",
          "CHTB{Imai_and_Matsumoto_play_with_multivariate_cryptography}",
          "CHTB{Imai_and_Matsumoto_play_with_multivariate_cryptography}"
        ],
        "learning_points": [
          "ctf_strategy",
          "challenge_analysis",
          "solution_methodology"
        ]
      }
    },
    {
      "path": "HackTM/index.md",
      "type": "ctf_writeup",
      "size": 18959,
      "content_preview": "# HackTM\n\n| Challenge  | Category | Points | \n| ------------- | ------------- | -------------: |\n|[Bad Keys](#Bad-keys) | Crypto | 197 |\n|[Count on me](#Count-on-me) | Crypto | 467 |\n|[OLD Times](#OLD-Times) | OSINT | 424 |\n\n# Crypto\n\n## Bad keys \n#### 197 Points\n\n>I captured this encrypted message a while ago.\n>Today, I got into their network and managed to take a snapshot of their key server. I don't think more than 10k messages have been sent between when I captured the message and when I too",
      "knowledge": {
        "techniques": [
          "aes",
          "des",
          "sage",
          "python"
        ],
        "algorithms": [],
        "tools": [
          "sage",
          "python"
        ],
        "attacks": [],
        "flags": [
          "HackTM{SanTa_ple@s3_TakE_mE_0ff_yOur_l1st_4f2d20ec18}",
          "HackTM{can_1_h@ve_y0ur_numb3r_5yst3m_??}",
          "else{\t\t\n   echo \"<b>Intruder!</b>\";\t\t\n }",
          "HackTM{HARDTIMES}"
        ],
        "learning_points": [
          "ctf_strategy",
          "challenge_analysis",
          "solution_methodology"
        ]
      }
    },
    {
      "path": "INS’HACK/readme.md",
      "type": "ctf_writeup",
      "size": 8014,
      "content_preview": "# INS'HACK: Yet Another RSA Challenge\n\nThis was a two part RSA challenge. We were supplied with $m,e,c$ and a corrupted \"prime\" $p$. The first stage introduced the problem in a form where you could try possible $p$ values by hand, stage two put the problem into a form that required some programming.\n\n# Part One\n\n## Challenge\n\n> Buy an encrypted flag, get a (almost intact) prime factor for free !\n> You can find a harder version of this challenge in the Programming category.\n\nThe source code shows",
      "knowledge": {
        "techniques": [
          "rsa",
          "des",
          "sage",
          "python"
        ],
        "algorithms": [],
        "tools": [
          "sage",
          "python"
        ],
        "attacks": [],
        "flags": [
          "INSA{REDACTED}",
          "INSA{I_w1ll_us3_OTp_n3xT_T1M3}",
          "INSA{REDACTED}",
          "INSA{Uh_never_give_4w4y_your_Pr1mes_I_m34n_duhhh}"
        ],
        "learning_points": [
          "ctf_strategy",
          "challenge_analysis",
          "solution_methodology"
        ]
      }
    },
    {
      "path": "README.md",
      "type": "ctf_writeup",
      "size": 3974,
      "content_preview": "<!-- <span class=\"tag-line\">Theoretical physicist, turned aspiring cryptographer. I am primarily interested in the application of elliptic curves in public-key cryptography.</span> -->\n\n<h2 style=\"text-align: center; margin: 3em 0 1em;\">\nGiacomo Pope (Jack)\n</h2>\n\n\n- Co-founder of [CryptoHack](https://cryptohack.org): a free education platform for learning modern cryptography.\n- Cryptography consultant with [NCC Group](https://cryptoservices.github.io/about/).\n- Researcher with the University of",
      "knowledge": {
        "techniques": [
          "elliptic curve",
          "isogeny",
          "sage",
          "sagemath",
          "sqisign",
          "sidh",
          "festa",
          "castryck-decru"
        ],
        "algorithms": [],
        "tools": [
          "sage"
        ],
        "attacks": [
          "key recovery"
        ],
        "flags": [],
        "learning_points": [
          "ctf_strategy",
          "challenge_analysis",
          "solution_methodology"
        ]
      }
    },
    {
      "path": "SecurityFest/readme.md",
      "type": "ctf_writeup",
      "size": 5090,
      "content_preview": "# Infant RSA\n\nThis was the RSA challenge from the recent security fest CTF. \n\n## Challenge\n\nThe challenge was given through a text file containing the following information\n\n```\nsage: n\n808493201253189889201870335543001135601554189565265515581299663310211777902538379504356224725568544299684762515298676864780234841305269234586977253698801983902702103720999490643296577224887200359679776298145742186594264184012564477263982070542179129719002846743110253588184709450192861516287258530229754571\nsage: e",
      "knowledge": {
        "techniques": [
          "rsa",
          "sage",
          "python"
        ],
        "algorithms": [],
        "tools": [
          "sage",
          "python"
        ],
        "attacks": [],
        "flags": [
          "ctf{dr4_m1g_b4kl4ng3s}",
          "ctf{dr4_m1g_b4kl4ng3s}",
          "text{gcd}",
          "sctf{dr4_m1g_b4kl4ng3s}",
          "sctf{dr4_m1g_b4kl4ng3s}"
        ],
        "learning_points": [
          "ctf_strategy",
          "challenge_analysis",
          "solution_methodology"
        ]
      }
    },
    {
      "path": "dice2022/commitment_issues.md",
      "type": "ctf_writeup",
      "size": 9136,
      "content_preview": "# Commitment Issues\n\n**Authors:** Jack \n\n**Tags:** crypto\n\n**Points:** 272 (16 solves) \n\n**Challenge Author:** gripingberry \n\n**Description:** \n\n> I created a new commitment scheme, but commitment is scary so I threw away the key.\n\n## Challenge\n\n```python\nfrom random import randrange\nfrom Crypto.Util.number import getPrime, inverse, bytes_to_long, GCD\n\nflag = b'dice{?????????????????????????}'\nn = 5\n\ndef get_prime(n, b):\n\tp = getPrime(b)\n\twhile GCD(p - 1, n) != 1:\n\t\tp = getPrime(b)\n\treturn p\n\np ",
      "knowledge": {
        "techniques": [
          "rsa",
          "des",
          "sage",
          "sagemath",
          "python",
          "coppersmith"
        ],
        "algorithms": [],
        "tools": [
          "sage",
          "python"
        ],
        "attacks": [],
        "flags": [
          "dice{?????????????????????????}",
          "begin{aligned}",
          "end{aligned}",
          "mathbb{Z}",
          "mathbb{Z}",
          "text{th}",
          "b_{ki}",
          "sum_{i=0}",
          "b_{ki}",
          "mathbf{M}",
          "begin{pmatrix}",
          "b_{10}",
          "b_{11}",
          "b_{12}",
          "b_{13}",
          "b_{14}",
          "b_{20}",
          "b_{21}",
          "b_{22}",
          "b_{32}",
          "b_{24}",
          "b_{30}",
          "b_{31}",
          "b_{32}",
          "b_{33}",
          "b_{34}",
          "b_{40}",
          "b_{41}",
          "b_{42}",
          "b_{43}",
          "b_{44}",
          "b_{50}",
          "b_{51}",
          "b_{52}",
          "b_{53}",
          "b_{54}",
          "end{pmatrix}",
          "mathbf{x}",
          "begin{pmatrix}",
          "end{pmatrix}",
          "mathbf{F}",
          "mathbf{M}",
          "mathbf{x}",
          "begin{pmatrix}",
          "end{pmatrix}",
          "mathbf{a}",
          "mathbf{M}",
          "mathbf{a}",
          "sum_{k=1}",
          "b_{k0}",
          "sum_{k=1}",
          "b_{kj}",
          "mathbf{a}",
          "sum_{i=1}",
          "sum_{i=1}",
          "mathbf{a}",
          "mathbf{M}",
          "mathbf{a}",
          "mathbf{M}",
          "dice{wh4t!!-wh0_g4ve_u-thE-k3y}"
        ],
        "learning_points": [
          "ctf_strategy",
          "challenge_analysis",
          "solution_methodology"
        ]
      }
    },
    {
      "path": "dice2022/readme.md",
      "type": "ctf_writeup",
      "size": 18222,
      "content_preview": "# DiceCTF 2022\n\nI played DiceCTF with my team [Organisers](https://org.anize.rs). We came first place. I wrote up two challenges for our website, I'm including them here just for completeness. To read more writeups for DiceCTF, have a look at the [Organisers' write-ups](https://org.anize.rs/dicectf-2022/).\n\n\n## Pow-Pow\n\n> It's a free flag, all you have to do is wait! Verifiably.\n>\n> `nc mc.ax 31337`\n\n### Challenge\n\n```python\n#!/usr/local/bin/python\n\nfrom hashlib import shake_128\n\n# from Crypto.U",
      "knowledge": {
        "techniques": [
          "rsa",
          "sage",
          "sagemath",
          "python",
          "coppersmith"
        ],
        "algorithms": [],
        "tools": [
          "sage",
          "python"
        ],
        "attacks": [],
        "flags": [
          "pmod{\\phi(n)}",
          "mathcal{G}",
          "mathbb{Z}",
          "mathbb{Z}",
          "mathcal{G}",
          "mathcal{G}",
          "frac{rM}",
          "dice{the_m1n1gun_4nd_f1shb0nes_the_r0ck3t_launch3r}",
          "dice{?????????????????????????}",
          "begin{aligned}",
          "end{aligned}",
          "mathbb{Z}",
          "mathbb{Z}",
          "text{th}",
          "b_{ki}",
          "sum_{i=0}",
          "b_{ki}",
          "mathbf{M}",
          "begin{pmatrix}",
          "b_{10}",
          "b_{11}",
          "b_{12}",
          "b_{13}",
          "b_{14}",
          "b_{20}",
          "b_{21}",
          "b_{22}",
          "b_{32}",
          "b_{24}",
          "b_{30}",
          "b_{31}",
          "b_{32}",
          "b_{33}",
          "b_{34}",
          "b_{40}",
          "b_{41}",
          "b_{42}",
          "b_{43}",
          "b_{44}",
          "b_{50}",
          "b_{51}",
          "b_{52}",
          "b_{53}",
          "b_{54}",
          "end{pmatrix}",
          "mathbf{x}",
          "begin{pmatrix}",
          "end{pmatrix}",
          "mathbf{F}",
          "mathbf{M}",
          "mathbf{x}",
          "begin{pmatrix}",
          "end{pmatrix}",
          "mathbf{a}",
          "mathbf{M}",
          "mathbf{a}",
          "sum_{k=1}",
          "b_{k0}",
          "sum_{k=1}",
          "b_{kj}",
          "mathbf{a}",
          "sum_{i=1}",
          "sum_{i=1}",
          "mathbf{a}",
          "mathbf{M}",
          "mathbf{a}",
          "mathbf{M}",
          "dice{wh4t!!-wh0_g4ve_u-thE-k3y}"
        ],
        "learning_points": [
          "ctf_strategy",
          "challenge_analysis",
          "solution_methodology"
        ]
      }
    },
    {
      "path": "hsctf-2019/readme.md",
      "type": "ctf_writeup",
      "size": 41544,
      "content_preview": "# HSCTF\n\nHere's a write up for the crypto challenges I was able to finish while paying hsctf. I've tried to be thorough with my writeup and include python implementation with a description of the solution. I hope that this is helpful.\n\n| Challenge  | Category |\n| ------------- | ------------- |\n|[Super Secure System](#super-secure-system) | OTP |\n|[Reverse Search Algorithm](#reverse-search-algorithm) | RSA |\n|[Massive RSA](#massive-rsa) | RSA |\n|[Really Secure Algorithm](#really-secure-algorithm",
      "knowledge": {
        "techniques": [
          "rsa",
          "aes",
          "des",
          "sage",
          "sagemath",
          "python"
        ],
        "algorithms": [],
        "tools": [
          "sage",
          "python"
        ],
        "attacks": [],
        "flags": [
          "ctf{h0w_d3d_y3u_de3cryP4_th3_s1p3R_s3cuR3_m355a9e?}",
          "ctf{h0w_d3d_y3u_de3cryP4_th3_s1p3R_s3cuR3_m355a9e?}",
          "ctf{y3s_rsa_1s_s0lved_10823704961253}",
          "ctf{y3s_rsa_1s_s0lved_10823704961253}",
          "ctf{forg0t_t0_mult1ply_prim3s}",
          "ctf{forg0t_t0_mult1ply_prim3s}",
          "ctf{square_number_time}",
          "ctf{square_number_time}",
          "ctf{th1s_1s_0ne_v3ry_l0ng_fl@g_b3ca8s3_t5x_l0v3z_vveR9_LOn9_flaGs7!}",
          "ctf{thiii111iiiss_isssss_yo0ur_b1rthd4y_s0ng_it_isnt_very_long_6621}",
          "ctf{th1s_1s_0ne_v3ry_l0ng_fl@g_b3ca8s3_t5x_l0v3z_vveR9_LOn9_flaGs7!}",
          "ctf{d1d_y0ur_b0mbe_s4cc33d???-961451631955}",
          "ctf{d1d_y0ur_b0mbe_s4cc33d???-961451631955}",
          "ctf{Anomalous curves, m0ar like anom00se curves}",
          "ctf{Anomalous curves, m0ar like anom00se curves}",
          "hsctf{h0w_d3d_y3u_de3cryP4_th3_s1p3R_s3cuR3_m355a9e?}",
          "hsctf{h0w_d3d_y3u_de3cryP4_th3_s1p3R_s3cuR3_m355a9e?}",
          "hsctf{y3s_rsa_1s_s0lved_10823704961253}",
          "hsctf{y3s_rsa_1s_s0lved_10823704961253}",
          "hsctf{forg0t_t0_mult1ply_prim3s}",
          "hsctf{forg0t_t0_mult1ply_prim3s}",
          "frac{1}",
          "frac{1}",
          "frac{1}",
          "frac{1}",
          "frac{1}",
          "frac{1}",
          "hsctf{square_number_time}",
          "hsctf{square_number_time}",
          "hsctf{th1s_1s_0ne_v3ry_l0ng_fl@g_b3ca8s3_t5x_l0v3z_vveR9_LOn9_flaGs7!}",
          "hsctf{thiii111iiiss_isssss_yo0ur_b1rthd4y_s0ng_it_isnt_very_long_6621}",
          "hsctf{th1s_1s_0ne_v3ry_l0ng_fl@g_b3ca8s3_t5x_l0v3z_vveR9_LOn9_flaGs7!}",
          "hsctf{d1d_y0ur_b0mbe_s4cc33d???-961451631955}",
          "hsctf{d1d_y0ur_b0mbe_s4cc33d???-961451631955}",
          "hsctf{Anomalous curves, m0ar like anom00se curves}",
          "hsctf{Anomalous curves, m0ar like anom00se curves}"
        ],
        "learning_points": [
          "ctf_strategy",
          "challenge_analysis",
          "solution_methodology"
        ]
      }
    },
    {
      "path": "m0lecon2022/readme.md",
      "type": "ctf_writeup",
      "size": 5937,
      "content_preview": "# M0lecon CTF 2022\n\nOrganisers played m0leconCTF 2022 last weekend, a 24 hour CTF hosted by pwnthem0le, and managed to grab first place! I didn't have much time to play with everyone, but I did get nerd sniped into solving this really nice isogeny challenge! Thanks to Drago_1729 for writing the challenge and pwnthem0le for hosting the CTF.\n\n## SIDHalf\n\n### Challenge\n\n* **Author**: [@Drago_1729](https://twitter.com/Drago1729)\n* **Solves**: 3\n* **Points**: 424\n\n> It seems a new isogeny hash functi",
      "knowledge": {
        "techniques": [
          "des",
          "isogeny",
          "sage",
          "python",
          "sidh"
        ],
        "algorithms": [],
        "tools": [
          "sage",
          "python"
        ],
        "attacks": [],
        "flags": [
          "E_{AB}",
          "stackrel{?}",
          "tilde{E}",
          "tilde{e}",
          "tilde{Q}",
          "hat{\\phi}",
          "tilde{Q}",
          "hat{\\phi}",
          "hat{\\phi}",
          "tilde{e}",
          "tilde{e}",
          "ptm{w31l_p41r1ng_c0mpu73s_53cr37_150g3n13s!!}"
        ],
        "learning_points": [
          "ctf_strategy",
          "challenge_analysis",
          "solution_methodology"
        ]
      }
    },
    {
      "path": "misc/superprime/readme.md",
      "type": "blog_post",
      "size": 1660,
      "content_preview": "# Coming soon\n\n\n## Implementation\n\n```py\nfrom Crypto.Util.number import getPrime\n\ndef get_pq(SEED):\n\tp = SEED\n\twhile True:\n\t\tp = next_prime(p)\n\t\tif p%3 == 2:\n\t\t\tq = p^2 + p + 1\n\t\t\tif is_prime(q):\n\t\t\t\treturn p,q\n\ndef get_embedding(prime, order):\n\tk = 1\n\twhile True:\n\t\tif (p^k-1) % order == 0:\n\t\t\treturn k\n\t\tk += 1\n\t\tif k > 10:\n\t\t\tprint(\"Something is broken\")\n\t\t\texit()\n\n# p picked, q = p^1 + p + 1\np,q = get_pq(1<<10)\nprint(f'p: {p}')\nprint(f'q: {q}')\nprint((p^6 - 1).factor())\n\nF = GF(p)\nE = Elliptic",
      "knowledge": {
        "techniques": [],
        "algorithms": [],
        "tools": [],
        "attacks": [],
        "flags": [],
        "learning_points": [
          "theoretical_background",
          "practical_application",
          "research_insights"
        ]
      }
    },
    {
      "path": "openband/README.md",
      "type": "ctf_writeup",
      "size": 28764,
      "content_preview": "# Open Band, Open Problem\n\n> This blogpost was originally posted on [CryptoHack](https://blog.cryptohack.org/openband). \n\nLast week, CryptoHack played in CryptoCTF as a big team and managed to grab second place. We shared a [write up](https://blog.cryptohack.org/cryptoctf2020) of the challenges we solved soon after the competition ended. Of all the challenges we saw, two of them managed to stump us during the 24 hours that the CTF was running for.\n\nOne of the unsolved challenges was Chilli. Duri",
      "knowledge": {
        "techniques": [
          "rsa",
          "des",
          "sage",
          "sagemath",
          "python"
        ],
        "algorithms": [],
        "tools": [
          "sage",
          "python"
        ],
        "attacks": [
          "collision"
        ],
        "flags": [
          "CTF{W3_likE_M0bIu5_B4nD_aZ_W3dD!n9_rInG}",
          "CTF{W3_likE_M0bIu5_B4nD_aZ_W3dD!n9_rInG}",
          "sum_{d | n}",
          "begin{align*}",
          "sum_{d | n}",
          "frac{n}",
          "sum_{d | n}",
          "frac{n}",
          "end{align*}",
          "sum_{d | n}",
          "sum_{d | n}",
          "frac{n}",
          "sum_{d | n}",
          "sum_{d | x}",
          "frac{x}",
          "tilde{f}",
          "sum_{d|n}",
          "CCTF{W3_likE_M0bIu5_B4nD_aZ_W3dD!n9_rInG}",
          "CCTF{W3_likE_M0bIu5_B4nD_aZ_W3dD!n9_rInG}",
          "sum_{d | N}",
          "sum_{d | n}",
          "begin{align*}",
          "end{align*}",
          "tilde{F}"
        ],
        "learning_points": [
          "ctf_strategy",
          "challenge_analysis",
          "solution_methodology"
        ]
      }
    },
    {
      "path": "picoCTF-2019/readme.md",
      "type": "ctf_writeup",
      "size": 57911,
      "content_preview": "# Pico CTF 2019\n\n\n| Challenge  | Category | Points |\n| ------------- | ------------- | -------------: |\n|[2Warm](#2Warm)| General Skills | 50 |\n|[Lets Warm Up](#Lets-Warm-Up)| General Skills | 50 |\n|[Warmed Up](#Warmed-Up)| General Skills | 50 |\n|[Bases](#Bases)| General Skills | 100 |\n|[First Grep](#First-Grep)| General Skills | 100 |\n|[Resources](#Resources)| General Skills | 100 |\n|[strings it](#strings-it)| General Skills | 100 |\n|[What's a net cat?](#what's-a-net-cat?)| General Skills | 100",
      "knowledge": {
        "techniques": [
          "rsa",
          "aes",
          "des",
          "sage",
          "python",
          "pollard"
        ],
        "algorithms": [],
        "tools": [
          "sage",
          "python",
          "mathematica"
        ],
        "attacks": [],
        "flags": [
          "CTF{p}",
          "CTF{61}",
          "CTF{l3arn_th3_r0p35}",
          "CTF{grep_is_good_to_find_things_5f0c3d9e}",
          "CTF{grep_is_good_to_find_things_5f0c3d9e}",
          "CTF{r3source_pag3_f1ag}",
          "CTF{5tRIng5_1T_30be4706}",
          "CTF{5tRIng5_1T_30be4706}",
          "CTF{nEtCat_Mast3ry_589c8b71}",
          "CTF{learning_about_converting_values_2360e4dd}",
          "CTF{learning_about_converting_values_2360e4dd}",
          "CTF{3asY_P3a5y8645475a}",
          "CTF{n0w_w3r3_ChaNg1ng_r3tURn56b6d6d97}",
          "CTF{arg5_and_r3turn5dc972417}",
          "CTF{th4t_w4snt_t00_d1ff3r3nt_r1ghT?_351346a2}",
          "CTF{r0p_1t_d0nT_st0p_1t_b3358018}",
          "CTF{r0p_1t_d0nT_st0p_1t_b3358018}",
          "CTF{THENUMBERSMASON}",
          "CTF{not_too_bad_of_a_problem}",
          "CTF{CRYPTOISFUN}",
          "CTF{vkhllbgzmaxknubvhglzeipcie}",
          "CTF{crossingtherubiconsglpwjpl}",
          "CTF{F1AG5AND5TUFF}",
          "CTF{(35.028309, 135.753082)(46.469391, 30.740883)(39.758949, -84.191605)(41.015137, 28.979530)(24.466667, 54.366669)(3.140853, 101.693207)_(9.005401, 38.763611)(-3.989038, -79.203560)(52.377956, 4.897070)(41.085651, -73.858467)(57.790001, -152.407227)(31.205753, 29.924526)}",
          "CTF{KODIAK_ALASKA}",
          "CTF{M0RS3C0D31SFUN3524946471}",
          "CTF{b311a50_0r_v1gn3r3_c1ph3r8e3b3a15}",
          "CTF{b311a50_0r_v1gn3r3_c1ph3r8e3b3a15}",
          "CTF{wA8_th4t$_ill3aGal..o6e437df2}",
          "CTF{n33d_a_lArg3r_e_e8e7052f}",
          "CTF{bad_1d3a5_5533202}",
          "CTF{too_many_fact0rs_2020200}",
          "CTF{73176001,67867967}",
          "CTF{unz1pp1ng_1s_3a5y}",
          "CTF{s0_m3ta_74e57c5c}",
          "CTF{h1d1ng_1n_th3_b1t5}",
          "CTF{h1d1ng_1n_th3_b1t5}",
          "CTF{now_you_know_about_extensions}",
          "CTF{not_all_spaces_are_created_equal_3175ae38e9f456ea0e62ca07260b71a2}",
          "CTF{not_all_spaces_are_created_equal_3175ae38e9f456ea0e62ca07260b71a2}",
          "CTF{beep_boop_im_in_space}",
          "CTF{pa$ta_1s_lyf3}",
          "CTF{tru3_d3 -->\n\n/* You need CSS to make pretty pages. Here's part 2/3 of the flag: t3ct1ve_0r_ju5t */\n\n/* Javascript sure is neat. Anyways part 3/3 of the flag: _lucky?d76327a1}",
          "CTF{tru3_d3t3ct1ve_0r_ju5t_lucky?d76327a1}",
          "CTF{') {\n         if (checkpass.substring(split*4, split*5) == 'ts_p') {\n          if (checkpass.substring(split*3, split*4) == 'lien') {\n            if (checkpass.substring(split*5, split*6) == 'lz_2') {\n              if (checkpass.substring(split*2, split*3) == 'no_c') {\n                if (checkpass.substring(split*7, split*8) == 'a}",
          "CTF{no_clients_plz_24454a}",
          "CTF{ca1cu1at1ng_Mach1n3s_a262d}",
          "CTF{not_this_again_6c2047}",
          "CTF{p1c0_s3cr3t_ag3nt_665ad8a4}",
          "CTF{65df43eff650d95dc1a21fef00d3d1b0}",
          "CTF{ec4fe193b0ebd7e2c20e701f493263d6}",
          "picoCTF{p}",
          "picoCTF{61}",
          "picoCTF{l3arn_th3_r0p35}",
          "picoCTF{grep_is_good_to_find_things_5f0c3d9e}",
          "picoCTF{grep_is_good_to_find_things_5f0c3d9e}",
          "picoCTF{r3source_pag3_f1ag}",
          "picoCTF{5tRIng5_1T_30be4706}",
          "picoCTF{5tRIng5_1T_30be4706}",
          "picoCTF{nEtCat_Mast3ry_589c8b71}",
          "picoCTF{learning_about_converting_values_2360e4dd}",
          "picoCTF{learning_about_converting_values_2360e4dd}",
          "picoCTF{3asY_P3a5y8645475a}",
          "picoCTF{n0w_w3r3_ChaNg1ng_r3tURn56b6d6d97}",
          "picoCTF{arg5_and_r3turn5dc972417}",
          "picoCTF{th4t_w4snt_t00_d1ff3r3nt_r1ghT?_351346a2}",
          "picoCTF{r0p_1t_d0nT_st0p_1t_b3358018}",
          "picoCTF{r0p_1t_d0nT_st0p_1t_b3358018}",
          "PICOCTF{THENUMBERSMASON}",
          "cvpbPGS{abg_gbb_onq_bs_n_ceboyrz}",
          "picoCTF{not_too_bad_of_a_problem}",
          "picoCTF{CRYPTOISFUN}",
          "picoCTF{vkhllbgzmaxknubvhglzeipcie}",
          "picoCTF{crossingtherubiconsglpwjpl}",
          "PICOCTF{F1AG5AND5TUFF}",
          "picoCTF{(35.028309, 135.753082)(46.469391, 30.740883)(39.758949, -84.191605)(41.015137, 28.979530)(24.466667, 54.366669)(3.140853, 101.693207)_(9.005401, 38.763611)(-3.989038, -79.203560)(52.377956, 4.897070)(41.085651, -73.858467)(57.790001, -152.407227)(31.205753, 29.924526)}",
          "picoCTF{KODIAK_ALASKA}",
          "PICOCTF{M0RS3C0D31SFUN3524946471}",
          "hgqqpohzCZK{m311a50_0x_a1rn3x3_h1ah3x8j3m3a15}",
          "halfpicoCTF{b311a50_0r_v1gn3r3_c1ph3r8e3b3a15}",
          "picoCTF{b311a50_0r_v1gn3r3_c1ph3r8e3b3a15}",
          "frac{n}",
          "frac{5051846941}",
          "picoCTF{wA8_th4t$_ill3aGal..o6e437df2}",
          "picoCTF{n33d_a_lArg3r_e_e8e7052f}",
          "picoCTF{bad_1d3a5_5533202}",
          "picoCTF{too_many_fact0rs_2020200}",
          "picoCTF{73176001,67867967}",
          "picoCTF{unz1pp1ng_1s_3a5y}",
          "picoCTF{s0_m3ta_74e57c5c}",
          "picoCTF{h1d1ng_1n_th3_b1t5}",
          "picoCTF{h1d1ng_1n_th3_b1t5}",
          "picoCTF{now_you_know_about_extensions}",
          "picoCTF{not_all_spaces_are_created_equal_3175ae38e9f456ea0e62ca07260b71a2}",
          "picoCTF{not_all_spaces_are_created_equal_3175ae38e9f456ea0e62ca07260b71a2}",
          "picoCTF{beep_boop_im_in_space}",
          "picoCTF{pa$ta_1s_lyf3}",
          "picoCTF{tru3_d3 -->\n\n/* You need CSS to make pretty pages. Here's part 2/3 of the flag: t3ct1ve_0r_ju5t */\n\n/* Javascript sure is neat. Anyways part 3/3 of the flag: _lucky?d76327a1}",
          "picoCTF{tru3_d3t3ct1ve_0r_ju5t_lucky?d76327a1}",
          "CTF{') {\n         if (checkpass.substring(split*4, split*5) == 'ts_p') {\n          if (checkpass.substring(split*3, split*4) == 'lien') {\n            if (checkpass.substring(split*5, split*6) == 'lz_2') {\n              if (checkpass.substring(split*2, split*3) == 'no_c') {\n                if (checkpass.substring(split*7, split*8) == 'a}",
          "picoCTF{no_clients_plz_24454a}",
          "picoCTF{ca1cu1at1ng_Mach1n3s_a262d}",
          "F{not') {\n         if (checkpass[_0x4b5b('0x2')](split * 0x2 * 0x2, split * 0x3 * 0x2) == _0x4b5b('0x6')) {\n          if (checkpass[_0x4b5b('0x2')](0xc, 0x10) == _0x4b5b('0x7')) {\n           alert(_0x4b5b('0x8'));\n          }",
          "picoCTF{not_this_again_6c2047}",
          "picoCTF{p1c0_s3cr3t_ag3nt_665ad8a4}",
          "picoCTF{65df43eff650d95dc1a21fef00d3d1b0}",
          "picoCTF{ec4fe193b0ebd7e2c20e701f493263d6}"
        ],
        "learning_points": [
          "ctf_strategy",
          "challenge_analysis",
          "solution_methodology"
        ]
      }
    },
    {
      "path": "projects/README.md",
      "type": "ctf_writeup",
      "size": 4449,
      "content_preview": "# Projects\n\n### CryptoHack\n\n[CryptoHack](https://cryptohack.org) is a fun, free platform for learning \nmodern cryptography that I co-founded with \n[Hyperreality](https://github.com/hyperreality/ctf-writeups). We built the \nsite with the vision of creating the resource we wished we had access to \nwhen we began studying cryptography. \n\nAlong side the challenges, we have an amazing community on \n[Discord](https://discord.gg/eJaJ3xC), which I recommend joining if you \nhave a Discord account and enjo",
      "knowledge": {
        "techniques": [
          "des",
          "sage",
          "sagemath",
          "python",
          "magma",
          "sqisign",
          "sidh",
          "sike",
          "castryck-decru"
        ],
        "algorithms": [],
        "tools": [
          "sage",
          "python",
          "magma",
          "mathematica"
        ],
        "attacks": [
          "key recovery"
        ],
        "flags": [],
        "learning_points": [
          "ctf_strategy",
          "challenge_analysis",
          "solution_methodology"
        ]
      }
    },
    {
      "path": "redpwn/readme.md",
      "type": "ctf_writeup",
      "size": 178583,
      "content_preview": "# Redpwn CTF\n\nI really enjoyed this CTF, only focused on the crypto, but had a good time and learnt a lot. Enough to bother doing this writeup at least. \n\nThis is my first write-up I've done after becoming part of [cr0wn](https://cr0wn.uk). The challenges written up below are the ones I focused on, but they were solved as a team. Thanks especially to Holocircuit, Hrpr, Hyperreality, V01d who helped me understand how to actually do any of this.\n\n## Contents\n\n| Challenge | Points | \n| ------------",
      "knowledge": {
        "techniques": [
          "elliptic curve",
          "rsa",
          "diffie-hellman",
          "des",
          "lattice",
          "discrete log",
          "sage",
          "python",
          "gap",
          "coppersmith"
        ],
        "algorithms": [],
        "tools": [
          "sage",
          "python",
          "gap"
        ],
        "attacks": [],
        "flags": [
          "flag{y0u_f0und_m0re_th4n_s3cr3ts.....th3_fl4g_1ts3lf!!!!}",
          "flag{s0m3t1m3s_crypt0gr4ph1c_1mpl3m3nt4t10ns_f41l}",
          "flag{I_dont_know_what_this_is}",
          "flag{I_dont_know_what_this_is}",
          "flag{y0u_f0und_m0re_th4n_s3cr3ts.....th3_fl4g_1ts3lf!!!!}",
          "flag{s0m3t1m3s_crypt0gr4ph1c_1mpl3m3nt4t10ns_f41l}",
          "flag{I_dont_know_what_this_is}",
          "flag{I_dont_know_what_this_is}"
        ],
        "learning_points": [
          "ctf_strategy",
          "challenge_analysis",
          "solution_methodology"
        ]
      }
    },
    {
      "path": "tools/mov.md",
      "type": "blog_post",
      "size": 1192,
      "content_preview": "# TODO \n- Explaination\n\n\n## Implementation\n\n```py\nfrom Crypto.Util.number import getPrime\n\na = 0\nb = 1\np = 665179258825259\nF = GF(p)\nE = EllipticCurve(F,[a,b])\nassert E.j_invariant() == 0\norder = E.order()\nprint(is_prime(order))\n\n# Embedding degree is the smallest integer such that\n# (p^k - 1) % E.order() == 0\n# It is vital to the MOV attack that k is small.\n# For supersingular curves, k ≤\t6\n\nk = 2 \nassert(p^k - 1) % order == 0\n\n# Create something to break by picking a generator, and a private k",
      "knowledge": {
        "techniques": [],
        "algorithms": [],
        "tools": [],
        "attacks": [],
        "flags": [],
        "learning_points": [
          "theoretical_background",
          "practical_application",
          "research_insights"
        ]
      }
    },
    {
      "path": "writeups/README.md",
      "type": "ctf_writeup",
      "size": 1885,
      "content_preview": "# Writeups\n\nHere is a collection of write ups and discussions of the challenges I have solved in various capture the flag competitions. The focus is usually the cryptographic challenges.\n\n## CTF Writeups\n\n| CTF  | Category |\n| ------------- | ------------- |\n| [M0lecon 2022](/m0lecon2022)  | Isogenies |\n| [DiceCTF 2022](/dice2022)  | VDF, Commitment Schemes [🥇 Best Writeup Award]|\n| [Crypto CTF 2021](/CryptoCTF-2021)  | Elliptic & Edwards Curves, RSA, Diophantine Eqns.  |\n| [Cyber Apocalypse CTF",
      "knowledge": {
        "techniques": [
          "elliptic curve",
          "rsa",
          "discrete log"
        ],
        "algorithms": [],
        "tools": [],
        "attacks": [],
        "flags": [],
        "learning_points": [
          "ctf_strategy",
          "challenge_analysis",
          "solution_methodology"
        ]
      }
    },
    {
      "path": "zer0pts2021/readme.md",
      "type": "ctf_writeup",
      "size": 5165,
      "content_preview": "# NOT Mordell\n\n> I found one integral point on an elliptic curve, so there's finite number of integral solutions.\n>\n> This means You can pick from an finite number of primes... right?\n>\n> special thanks: [https://ctf.cr0wn.uk/challenges#Mordell primes-11](https://ctf.cr0wn.uk/challenges#Mordell%20primes-11)\n>\n> author:theoldmoon0602\n\n## Disclaimer\n\nI didn't play this CTF, but I was pinged when someone noticed this challenge was based off one I made for UnionCTF. It was a fun challenge, i liked i",
      "knowledge": {
        "techniques": [
          "elliptic curve",
          "rsa",
          "des",
          "sage",
          "sagemath",
          "python"
        ],
        "algorithms": [],
        "tools": [
          "sage",
          "python"
        ],
        "attacks": [],
        "flags": [
          "begin{aligned}",
          "end{aligned}",
          "frac{Q_y - P_y}",
          "sqrt{Q_x^3 + a Q_x + b}",
          "begin{aligned}",
          "frac{Q_y - P_y}",
          "end{aligned}",
          "begin{aligned}",
          "end{aligned}",
          "tilde{f}",
          "zer0pts{7h4nk_y0u_j4ck_7h4nk_y0u_cr0wn}",
          "zer0pts{7h4nk_y0u_j4ck_7h4nk_y0u_cr0wn}"
        ],
        "learning_points": [
          "ctf_strategy",
          "challenge_analysis",
          "solution_methodology"
        ]
      }
    }
  ]
}